// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package import_to_bd_urg.import_bdurg_to_dwurg_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: import_bdUrg_to_dwUrg Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class import_bdUrg_to_dwUrg implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "import_bdUrg_to_dwUrg";
	private final String projectName = "IMPORT_TO_BD_URG";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					import_bdUrg_to_dwUrg.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(import_bdUrg_to_dwUrg.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];

		public String descricao_gen;

		public String getDescricao_gen() {
			return this.descricao_gen;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length) {
					if (length < 1024
							&& commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length == 0) {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[1024];
					} else {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length);
				strReturn = new String(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.descricao_gen = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.descricao_gen, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("descricao_gen=" + descricao_gen);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "dim_genero";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null
						|| dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				String insert_tDBOutput_1 = "INSERT INTO `" + "dim_genero"
						+ "` (`descricao_gen`) VALUES (?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(
						url_tDBInput_1, dbUser_tDBInput_1, dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT distinct SEXO from urg_inform_geral";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.descricao_gen = null;
						} else {

							row1.descricao_gen = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 1, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						if (row1.descricao_gen == null) {
							pstmt_tDBOutput_1
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(1, row1.descricao_gen);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;
						if (!whetherReject_tDBOutput_1) {
						}
						if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
							try {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_1 = 0;
						}
						commitCounter_tDBOutput_1++;

						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

							try {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_1.commit();
							commitCounter_tDBOutput_1 = 0;

						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];

		public String descricao_esp;

		public String getDescricao_esp() {
			return this.descricao_esp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length) {
					if (length < 1024
							&& commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length == 0) {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[1024];
					} else {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length);
				strReturn = new String(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.descricao_esp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.descricao_esp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("descricao_esp=" + descricao_esp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "dim_especialidade";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null
						|| dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				String insert_tDBOutput_2 = "INSERT INTO `"
						+ "dim_especialidade"
						+ "` (`descricao_esp`) VALUES (?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(
						url_tDBInput_2, dbUser_tDBInput_2, dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT distinct ALTA_DES_ESPECIALIDADE from urg_inform_geral";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.descricao_esp = null;
						} else {

							row2.descricao_esp = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 1, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						if (row2.descricao_esp == null) {
							pstmt_tDBOutput_2
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(1, row2.descricao_esp);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;
						if (!whetherReject_tDBOutput_2) {
						}
						if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
							try {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_2 = 0;
						}
						commitCounter_tDBOutput_2++;

						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

							try {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_2.commit();
							commitCounter_tDBOutput_2 = 0;

						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

					}

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];

		public String descricao_prov;

		public String getDescricao_prov() {
			return this.descricao_prov;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length) {
					if (length < 1024
							&& commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length == 0) {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[1024];
					} else {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length);
				strReturn = new String(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.descricao_prov = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.descricao_prov, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("descricao_prov=" + descricao_prov);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "dim_proveniencia";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbProperties_tDBOutput_3 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_3 = null;
				if (dbProperties_tDBOutput_3 == null
						|| dbProperties_tDBOutput_3.trim().length() == 0) {
					url_tDBOutput_3 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_3 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_3 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_3;
				}
				String driverClass_tDBOutput_3 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				String insert_tDBOutput_3 = "INSERT INTO `"
						+ "dim_proveniencia"
						+ "` (`descricao_prov`) VALUES (?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(
						url_tDBInput_3, dbUser_tDBInput_3, dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT distinct DES_PROVENIENCIA from urg_inform_geral";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.descricao_prov = null;
						} else {

							row3.descricao_prov = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 1, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_3 = false;
						if (row3.descricao_prov == null) {
							pstmt_tDBOutput_3
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(1, row3.descricao_prov);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;
						if (!whetherReject_tDBOutput_3) {
						}
						if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
							try {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_3 = 0;
						}
						commitCounter_tDBOutput_3++;

						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

							try {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_3.commit();
							commitCounter_tDBOutput_3 = 0;

						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

					}

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_4Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];

		public String descricao_loc;

		public String getDescricao_loc() {
			return this.descricao_loc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length) {
					if (length < 1024
							&& commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length == 0) {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[1024];
					} else {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length);
				strReturn = new String(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.descricao_loc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.descricao_loc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("descricao_loc=" + descricao_loc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;

				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "dim_local";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime()
						.getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime()
						.getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbProperties_tDBOutput_4 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_4 = null;
				if (dbProperties_tDBOutput_4 == null
						|| dbProperties_tDBOutput_4.trim().length() == 0) {
					url_tDBOutput_4 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_4 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_4 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_4;
				}
				String driverClass_tDBOutput_4 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_4 = "root";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				java.lang.Class.forName(driverClass_tDBOutput_4);

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;

				String insert_tDBOutput_4 = "INSERT INTO `" + "dim_local"
						+ "` (`descricao_loc`) VALUES (?)";
				int batchSize_tDBOutput_4 = 100;
				int batchSizeCounter_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(
						url_tDBInput_4, dbUser_tDBInput_4, dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "SELECT distinct urg_inform_geral.DES_LOCAL from urg_inform_geral";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.descricao_loc = null;
						} else {

							row4.descricao_loc = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 1, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_4 = false;
						if (row4.descricao_loc == null) {
							pstmt_tDBOutput_4
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(1, row4.descricao_loc);
						}

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;
						if (!whetherReject_tDBOutput_4) {
						}
						if (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
							try {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
										.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_4 = 0;
						}
						commitCounter_tDBOutput_4++;

						if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

							try {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
										.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_4.commit();
							commitCounter_tDBOutput_4 = 0;

						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

					}

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (batchSizeCounter_tDBOutput_4 != 0) {
						int countSum_tDBOutput_4 = 0;

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
								: countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_4 = 0;

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0) {

					conn_tDBOutput_4.commit();

				}

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_5Process(globalMap);

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];

		public String descricao_cau;

		public String getDescricao_cau() {
			return this.descricao_cau;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length) {
					if (length < 1024
							&& commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg.length == 0) {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[1024];
					} else {
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length);
				strReturn = new String(
						commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.descricao_cau = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.descricao_cau, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("descricao_cau=" + descricao_cau);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "dim_causa";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbProperties_tDBOutput_5 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_5 = null;
				if (dbProperties_tDBOutput_5 == null
						|| dbProperties_tDBOutput_5.trim().length() == 0) {
					url_tDBOutput_5 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_5 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_5 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_5;
				}
				String driverClass_tDBOutput_5 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				String insert_tDBOutput_5 = "INSERT INTO `" + "dim_causa"
						+ "` (`descricao_cau`) VALUES (?)";
				int batchSize_tDBOutput_5 = 100;
				int batchSizeCounter_tDBOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				java.util.Calendar calendar_tDBInput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "root";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(
						url_tDBInput_5, dbUser_tDBInput_5, dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "SELECT distinct DES_CAUSA from urg_inform_geral";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.descricao_cau = null;
						} else {

							row5.descricao_cau = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 1, false);
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 main ] start
						 */

						currentComponent = "tDBOutput_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_5 = false;
						if (row5.descricao_cau == null) {
							pstmt_tDBOutput_5
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(1, row5.descricao_cau);
						}

						pstmt_tDBOutput_5.addBatch();
						nb_line_tDBOutput_5++;

						batchSizeCounter_tDBOutput_5++;
						if (!whetherReject_tDBOutput_5) {
						}
						if (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
							try {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
										.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_5 = 0;
						}
						commitCounter_tDBOutput_5++;

						if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

							try {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
										.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_5.commit();
							commitCounter_tDBOutput_5 = 0;

						}

						tos_count_tDBOutput_5++;

						/**
						 * [tDBOutput_5 main ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_end ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

					}

				}

				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (batchSizeCounter_tDBOutput_5 != 0) {
						int countSum_tDBOutput_5 = 0;

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_5 = 0;

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0) {

					conn_tDBOutput_5.commit();

				}

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];

		public java.util.Date data;

		public java.util.Date getData() {
			return this.data;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.data = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("data=" + String.valueOf(data));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;

				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "dim_data";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime()
						.getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime()
						.getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbProperties_tDBOutput_6 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_6 = null;
				if (dbProperties_tDBOutput_6 == null
						|| dbProperties_tDBOutput_6.trim().length() == 0) {
					url_tDBOutput_6 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_6 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_6 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_6;
				}
				String driverClass_tDBOutput_6 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_6 = "root";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				java.lang.Class.forName(driverClass_tDBOutput_6);

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;

				String insert_tDBOutput_6 = "INSERT INTO `" + "dim_data"
						+ "` (`data`) VALUES (?)";
				int batchSize_tDBOutput_6 = 100;
				int batchSizeCounter_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				java.util.Calendar calendar_tDBInput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "root";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, dbUser_tDBInput_6, dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "SELECT DTA_NASCIMENTO FROM urg_inform_geral\n	UNION SELECT DATE_FORMAT(DATAHORA_ADM, '%Y-%m-%d') FROM urg_inform_geral"
						+ "\n	UNION SELECT DATE_FORMAT(DATAHORA_ALTA, '%Y-%m-%d') FROM urg_inform_geral";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.data = null;
						} else {

							if (rs_tDBInput_6.getString(1) != null) {
								String dateString_tDBInput_6 = rs_tDBInput_6
										.getString(1);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_6)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_6)) {
									row6.data = rs_tDBInput_6.getTimestamp(1);
								} else {
									row6.data = (java.util.Date) year0_tDBInput_6
											.clone();
								}
							} else {
								row6.data = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_6 = false;
						if (row6.data != null) {
							date_tDBOutput_6 = row6.data.getTime();
							if (date_tDBOutput_6 < year1_tDBOutput_6
									|| date_tDBOutput_6 >= year10000_tDBOutput_6) {
								pstmt_tDBOutput_6.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_6
										.setTimestamp(1,
												new java.sql.Timestamp(
														date_tDBOutput_6));
							}
						} else {
							pstmt_tDBOutput_6.setNull(1, java.sql.Types.DATE);
						}

						pstmt_tDBOutput_6.addBatch();
						nb_line_tDBOutput_6++;

						batchSizeCounter_tDBOutput_6++;
						if (!whetherReject_tDBOutput_6) {
						}
						if (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
							try {
								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
										.executeBatch()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}
								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_6 = 0;
						}
						commitCounter_tDBOutput_6++;

						if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

							try {
								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
										.executeBatch()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}
								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_6.commit();
							commitCounter_tDBOutput_6 = 0;

						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

					}

				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (batchSizeCounter_tDBOutput_6 != 0) {
						int countSum_tDBOutput_6 = 0;

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
								.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
								: countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_6 = 0;

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				if (commitCounter_tDBOutput_6 > 0) {

					conn_tDBOutput_6.commit();

				}

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_7Process(globalMap);

				/**
				 * [tDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		static byte[] commonByteArray_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer idUrg;

		public Integer getIdUrg() {
			return this.idUrg;
		}

		public Integer id_especialidade;

		public Integer getId_especialidade() {
			return this.id_especialidade;
		}

		public Integer id_proveniencia;

		public Integer getId_proveniencia() {
			return this.id_proveniencia;
		}

		public Integer id_causa;

		public Integer getId_causa() {
			return this.id_causa;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_genero;

		public Integer getId_genero() {
			return this.id_genero;
		}

		public Integer id_nascimento;

		public Integer getId_nascimento() {
			return this.id_nascimento;
		}

		public Integer id_admissao;

		public Integer getId_admissao() {
			return this.id_admissao;
		}

		public Integer id_alta;

		public Integer getId_alta() {
			return this.id_alta;
		}

		public Integer idade_paciente;

		public Integer getIdade_paciente() {
			return this.idade_paciente;
		}

		public Integer tempo_adm_alta;

		public Integer getTempo_adm_alta() {
			return this.tempo_adm_alta;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.idUrg == null) ? 0 : this.idUrg.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.idUrg == null) {
				if (other.idUrg != null)
					return false;

			} else if (!this.idUrg.equals(other.idUrg))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.idUrg = this.idUrg;
			other.id_especialidade = this.id_especialidade;
			other.id_proveniencia = this.id_proveniencia;
			other.id_causa = this.id_causa;
			other.id_local = this.id_local;
			other.id_genero = this.id_genero;
			other.id_nascimento = this.id_nascimento;
			other.id_admissao = this.id_admissao;
			other.id_alta = this.id_alta;
			other.idade_paciente = this.idade_paciente;
			other.tempo_adm_alta = this.tempo_adm_alta;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.idUrg = this.idUrg;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IMPORT_TO_BD_URG_import_bdUrg_to_dwUrg) {

				try {

					int length = 0;

					this.idUrg = readInteger(dis);

					this.id_especialidade = readInteger(dis);

					this.id_proveniencia = readInteger(dis);

					this.id_causa = readInteger(dis);

					this.id_local = readInteger(dis);

					this.id_genero = readInteger(dis);

					this.id_nascimento = readInteger(dis);

					this.id_admissao = readInteger(dis);

					this.id_alta = readInteger(dis);

					this.idade_paciente = readInteger(dis);

					this.tempo_adm_alta = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.idUrg, dos);

				// Integer

				writeInteger(this.id_especialidade, dos);

				// Integer

				writeInteger(this.id_proveniencia, dos);

				// Integer

				writeInteger(this.id_causa, dos);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_genero, dos);

				// Integer

				writeInteger(this.id_nascimento, dos);

				// Integer

				writeInteger(this.id_admissao, dos);

				// Integer

				writeInteger(this.id_alta, dos);

				// Integer

				writeInteger(this.idade_paciente, dos);

				// Integer

				writeInteger(this.tempo_adm_alta, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idUrg=" + String.valueOf(idUrg));
			sb.append(",id_especialidade=" + String.valueOf(id_especialidade));
			sb.append(",id_proveniencia=" + String.valueOf(id_proveniencia));
			sb.append(",id_causa=" + String.valueOf(id_causa));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_genero=" + String.valueOf(id_genero));
			sb.append(",id_nascimento=" + String.valueOf(id_nascimento));
			sb.append(",id_admissao=" + String.valueOf(id_admissao));
			sb.append(",id_alta=" + String.valueOf(id_alta));
			sb.append(",idade_paciente=" + String.valueOf(idade_paciente));
			sb.append(",tempo_adm_alta=" + String.valueOf(tempo_adm_alta));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idUrg, other.idUrg);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;

				int rejectedCount_tDBOutput_7 = 0;

				String tableName_tDBOutput_7 = "facts_urg";
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				long date_tDBOutput_7;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbProperties_tDBOutput_7 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				String url_tDBOutput_7 = null;
				if (dbProperties_tDBOutput_7 == null
						|| dbProperties_tDBOutput_7.trim().length() == 0) {
					url_tDBOutput_7 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_7 = "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
					if (!properties_tDBOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_7 = "jdbc:mysql://" + "127.0.0.1" + ":"
							+ "3306" + "/" + "dw_urg" + "?"
							+ properties_tDBOutput_7;
				}
				String driverClass_tDBOutput_7 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_7 = "root";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				java.lang.Class.forName(driverClass_tDBOutput_7);

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;

				String insert_tDBOutput_7 = "INSERT INTO `"
						+ "facts_urg"
						+ "` (`idUrg`,`id_especialidade`,`id_proveniencia`,`id_causa`,`id_local`,`id_genero`,`id_nascimento`,`id_admissao`,`id_alta`,`idade_paciente`,`tempo_adm_alta`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_7 = 100;
				int batchSizeCounter_tDBOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				java.util.Calendar calendar_tDBInput_7 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "root";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("0fccf48362749b0d");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:mysql://"
						+ "127.0.0.1"
						+ ":"
						+ "3306"
						+ "/"
						+ "bd_urg"
						+ "?"
						+ "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, dbUser_tDBInput_7, dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "SELECT URG_EPISODIO, id_especialidade, id_proveniencia, id_causa, id_local, id_genero,\n	(SELECT id_data FROM  dw_urg.d"
						+ "im_data \n		WHERE data LIKE DATE_FORMAT(bd_urg.urg_inform_geral.DTA_NASCIMENTO, '%Y-%m-%d')) AS id_nascimento, \n	(SELEC"
						+ "T id_data FROM  dw_urg.dim_data \n		WHERE data LIKE DATE_FORMAT(bd_urg.urg_inform_geral.DATAHORA_ADM, '%Y-%m-%d')) AS id"
						+ "_admissao, \n	(SELECT id_data FROM  dw_urg.dim_data \n		WHERE data LIKE DATE_FORMAT(bd_urg.urg_inform_geral.DATAHORA_ALT"
						+ "A, '%Y-%m-%d')) AS id_alta,\n	TIMESTAMPDIFF(YEAR,DTA_NASCIMENTO,DATAHORA_ADM) AS idade_paciente,  \n	TIMESTAMPDIFF(MINUT"
						+ "E,DATAHORA_ADM,DATAHORA_ALTA) AS tempo_adm_alta\nFROM bd_urg.urg_inform_geral, dw_urg.dim_genero, dw_urg.dim_causa, dw_u"
						+ "rg.dim_proveniencia, dw_urg.dim_local, dw_urg.dim_especialidade\n	WHERE \n		bd_urg.urg_inform_geral.ALTA_DES_ESPECIALIDA"
						+ "DE = dw_urg.dim_especialidade.descricao_esp\n        AND\n        bd_urg.urg_inform_geral.DES_PROVENIENCIA LIKE dw_urg.d"
						+ "im_proveniencia.descricao_prov\n        AND\n		bd_urg.urg_inform_geral.DES_CAUSA LIKE dw_urg.dim_causa.descricao_cau\n  "
						+ "      AND\n        bd_urg.urg_inform_geral.DES_LOCAL LIKE dw_urg.dim_local.descricao_loc\n        AND\n        bd_urg.ur"
						+ "g_inform_geral.SEXO = dw_urg.dim_genero.descricao_gen\n	ORDER BY URG_EPISODIO";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.idUrg = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row7.idUrg = rs_tDBInput_7.getInt(1);
							} else {
								row7.idUrg = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.id_especialidade = null;
						} else {

							if (rs_tDBInput_7.getObject(2) != null) {
								row7.id_especialidade = rs_tDBInput_7.getInt(2);
							} else {
								row7.id_especialidade = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.id_proveniencia = null;
						} else {

							if (rs_tDBInput_7.getObject(3) != null) {
								row7.id_proveniencia = rs_tDBInput_7.getInt(3);
							} else {
								row7.id_proveniencia = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row7.id_causa = null;
						} else {

							if (rs_tDBInput_7.getObject(4) != null) {
								row7.id_causa = rs_tDBInput_7.getInt(4);
							} else {
								row7.id_causa = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row7.id_local = null;
						} else {

							if (rs_tDBInput_7.getObject(5) != null) {
								row7.id_local = rs_tDBInput_7.getInt(5);
							} else {
								row7.id_local = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row7.id_genero = null;
						} else {

							if (rs_tDBInput_7.getObject(6) != null) {
								row7.id_genero = rs_tDBInput_7.getInt(6);
							} else {
								row7.id_genero = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row7.id_nascimento = null;
						} else {

							if (rs_tDBInput_7.getObject(7) != null) {
								row7.id_nascimento = rs_tDBInput_7.getInt(7);
							} else {
								row7.id_nascimento = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row7.id_admissao = null;
						} else {

							if (rs_tDBInput_7.getObject(8) != null) {
								row7.id_admissao = rs_tDBInput_7.getInt(8);
							} else {
								row7.id_admissao = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row7.id_alta = null;
						} else {

							if (rs_tDBInput_7.getObject(9) != null) {
								row7.id_alta = rs_tDBInput_7.getInt(9);
							} else {
								row7.id_alta = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row7.idade_paciente = null;
						} else {

							if (rs_tDBInput_7.getObject(10) != null) {
								row7.idade_paciente = rs_tDBInput_7.getInt(10);
							} else {
								row7.idade_paciente = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row7.tempo_adm_alta = null;
						} else {

							if (rs_tDBInput_7.getObject(11) != null) {
								row7.tempo_adm_alta = rs_tDBInput_7.getInt(11);
							} else {
								row7.tempo_adm_alta = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 main ] start
						 */

						currentComponent = "tDBOutput_7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_7 = false;
						if (row7.idUrg == null) {
							pstmt_tDBOutput_7
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(1, row7.idUrg);
						}

						if (row7.id_especialidade == null) {
							pstmt_tDBOutput_7
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(2, row7.id_especialidade);
						}

						if (row7.id_proveniencia == null) {
							pstmt_tDBOutput_7
									.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(3, row7.id_proveniencia);
						}

						if (row7.id_causa == null) {
							pstmt_tDBOutput_7
									.setNull(4, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(4, row7.id_causa);
						}

						if (row7.id_local == null) {
							pstmt_tDBOutput_7
									.setNull(5, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(5, row7.id_local);
						}

						if (row7.id_genero == null) {
							pstmt_tDBOutput_7
									.setNull(6, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(6, row7.id_genero);
						}

						if (row7.id_nascimento == null) {
							pstmt_tDBOutput_7
									.setNull(7, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(7, row7.id_nascimento);
						}

						if (row7.id_admissao == null) {
							pstmt_tDBOutput_7
									.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(8, row7.id_admissao);
						}

						if (row7.id_alta == null) {
							pstmt_tDBOutput_7
									.setNull(9, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(9, row7.id_alta);
						}

						if (row7.idade_paciente == null) {
							pstmt_tDBOutput_7.setNull(10,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(10, row7.idade_paciente);
						}

						if (row7.tempo_adm_alta == null) {
							pstmt_tDBOutput_7.setNull(11,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(11, row7.tempo_adm_alta);
						}

						pstmt_tDBOutput_7.addBatch();
						nb_line_tDBOutput_7++;

						batchSizeCounter_tDBOutput_7++;
						if (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
							try {
								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
										.executeBatch()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0
											: 1);
								}
								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}
								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_7 = 0;
						}
						commitCounter_tDBOutput_7++;

						if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

							try {
								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
										.executeBatch()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: 1);
								}
								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : e
										.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}
								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_7.commit();
							commitCounter_tDBOutput_7 = 0;

						}

						tos_count_tDBOutput_7++;

						/**
						 * [tDBOutput_7 main ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_end ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

					}

				}

				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (batchSizeCounter_tDBOutput_7 != 0) {
						int countSum_tDBOutput_7 = 0;

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_7 = 0;

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");

				}
				resourceMap.put("statementClosed_tDBOutput_7", true);
				if (commitCounter_tDBOutput_7 > 0) {

					conn_tDBOutput_7.commit();

				}

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final import_bdUrg_to_dwUrg import_bdUrg_to_dwUrgClass = new import_bdUrg_to_dwUrg();

		int exitCode = import_bdUrg_to_dwUrgClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = import_bdUrg_to_dwUrg.class
					.getClassLoader().getResourceAsStream(
							"import_to_bd_urg/import_bdurg_to_dwurg_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = import_bdUrg_to_dwUrg.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : import_bdUrg_to_dwUrg");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 168196 characters generated by Talend Open Studio for Big Data on the 8 de
 * Janeiro de 2019 22:39:07 GMT
 ************************************************************************************************/
